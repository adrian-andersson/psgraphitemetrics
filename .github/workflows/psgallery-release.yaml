name: PSGallery Latest Release

on:
  workflow_dispatch:

jobs:
  psgalleryDeploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 #Ensure we are getting all the tag history

      - name: Get latest release details
        id: get_release
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          $verbosePreference = 'Continue'
          $release = gh release view --json tagName,name,body,createdAt,author,assets,isPrerelease
          write-verbose "Release:`n$($release|out-string)"
          $releaseFromJson = $release|convertFrom-json -errorAction ignore
          $tagName = $releaseFromJson.tagName
          $releaseName = $releaseFromJson.name
          $releaseBody = $releaseFromJson.body
          $createdAt = $releaseFromJson.createdAt
          $author = $releaseFromJson.author
          $assets = $releaseFromJson.assets
          $isPreRelease = $releaseFromJson.isPrerelease
          Write-Output "tag_name=$tagName" >> $env:GITHUB_OUTPUT
          Write-Output "release_name=$releaseName" >> $env:GITHUB_OUTPUT
          Write-Output "release_body=$releaseBody" >> $env:GITHUB_OUTPUT
          Write-Output "release_author=$author" >> $env:GITHUB_OUTPUT
          Write-Output "release_createdAt=$createdAt" >> $env:GITHUB_OUTPUT
          Write-Output "release_assets=$assets" >> $env:GITHUB_OUTPUT
          Write-Output "release_isPreRelease=$isPreRelease" >> $env:GITHUB_OUTPUT

      - name: Install dependencies
        shell: pwsh
        run: |
          $VerbosePreference = 'Continue'
          Install-Module -Name Microsoft.PowerShell.PSResourceGet -Force -SkipPublisherCheck
          $moduleList = @('Microsoft.PowerShell.PSResourceGet')
          import-module $moduleList
          get-module $moduleList|Select-object Name,@{name='version';expression={if($_.PrivateData.PSData.Prerelease){"$($_.Version)-$($_.PrivateData.PSData.Prerelease)"}else{"$($_.Version)"}}}|Format-Table

      - name: Register Repository
        shell: pwsh
        id: repoSetup
        if: success()  
        run: |
          $VerbosePreference = 'Continue'
          $repoUrl = "https://nuget.pkg.github.com/$($env:GITHUB_REPOSITORY_OWNER)/index.json"
          write-verbose "Got repoUrl: $repoUrl"
          $repositorySplat = @{
            uri = $repoUrl
            trusted = $true
            name = 'myGHPackages'
          }
          register-psresourcerepository @repositorySplat
          write-verbose "Repositories:`n $(get-psresourceRepository|select name,uri,trusted|format-list|out-string)"

      - name: Install Latest Module And Publish to Gallery
        shell: pwsh
        id: moduleInstall
        env:
          GH_TOKEN: ${{ github.token }}
          PSGalleryToken: ${{ secrets.PSGALLERY }}
          isPreRelease: ${{ steps.get_release.outputs.release_isPreRelease }}
          tagName: ${{ steps.get_release.outputs.tag_name }}
        if: success()  
        run: |
          $VerbosePreference = 'Continue'
          $isPreRelease = $env:isPreRelease
          if(!(test-path .\moduleForgeConfig.xml)){
            throw 'Error reading ModuleForge Config'
          }
          $config = import-clixml .\moduleForgeConfig.xml
          $moduleName = $config.moduleName
          write-verbose "ModuleName: $moduleName"
          $credential = New-Object System.Management.Automation.PSCredential("githubActions", (ConvertTo-SecureString $env:GH_TOKEN -AsPlainText -Force))
          $versionString = $env:tagName
          write-verbose "Version from Tag: $versionString"
          $version = $versionString.substring(1)
          $semver = [semver]::New($version)
          write-verbose "VersionConvert : $semver"
          $fetchSplat = @{
            Repository = 'myGHPackages'
            name = $moduleName
            credential = $credential
            version = $semver
          }
          $latestRelease = find-psresource @fetchSplat
          write-verbose "latestRelease: $($latestRelease|format-list|out-string)"
          if($latestRelease)
          {
            $latestRelease|install-psresource -credential $credential
          }else{
            write-warning 'No module found'
          }
          $moduleFound = get-module $moduleName -listAvailable
          if($moduleFound)
          {
            write-verbose "ModuleFound:`n$($moduleFound|out-string)"
          }else{
            throw 'Module failed install'
          }
          write-verbose 'Push Package to PSGallery'
          $publishSplat = @{
            repository = 'PSGallery'
            APIKey = $env:PSGalleryToken
            Path = $moduleFound.moduleBase
          }
          publish-psResource @publishSplat
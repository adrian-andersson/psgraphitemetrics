name: PSGallery Latest Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0 #Ensure we are getting all the tag history

      - name: Get latest release details
        id: get_release
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $verbosePreference = 'Continue'
          #Even though we put in --JSON, it seems to return an array
          $release = gh release view --json tagName,name,body,createdAt,author,assets,isPrerelease -q ".tagName,.name,.body"
          write-verbose "Release:`n$($release|out-string)"
          write-verbose "ReleaseObjectCount: $($release.count)"
          $tagName = $release[0]
          $releaseName = $release[1]
          $releaseBody = $release[2]
          $createdAt = $release[3]
          $author = $release[4]
          $isPreRelease = $release[5]
          Write-Output "::set-output name=tag_name::$tagName"
          Write-Output "::set-output name=release_name::$releaseName"
          Write-Output "::set-output name=release_body::$releaseBody"
          Write-Output "::set-output name=release_author::$author"
          Write-Output "::set-output name=release_createdAt::$createdAt"
          Write-Output "::set-output name=release_isPreRelease::$isPreRelease"

      - name: Output Release Details
        shell: pwsh
        env:
          LastReleaseTag: ${{ steps.get_release.outputs.tag_name }}
          LastReleaseName: ${{ steps.get_release.outputs.release_name }}
          LastReleaseBody: ${{ steps.get_release.outputs.release_body }}
        run: |
          $VerbosePreference = 'Continue'
          $LastReleaseTag = "$($env:LastReleaseTag)"
          write-verbose "LastReleaseTag: $LastReleaseTag"
          $LastReleaseName = "$($env:LastReleaseName)"
          write-verbose "LastReleaseName: $LastReleaseName"
          $LastReleaseBody = "$($env:LastReleaseBody)"
          write-verbose "LastReleaseBody: $LastReleaseBody"

      - name: Install dependencies
        shell: pwsh
        run: |
          $VerbosePreference = 'Continue'
          Install-Module -Name Microsoft.PowerShell.PSResourceGet -Force -SkipPublisherCheck
          $moduleList = @('Microsoft.PowerShell.PSResourceGet')
          import-module $moduleList
          get-module $moduleList|Select-object Name,@{name='version';expression={if($_.PrivateData.PSData.Prerelease){"$($_.Version)-$($_.PrivateData.PSData.Prerelease)"}else{"$($_.Version)"}}}|Format-Table

      - name: Register Repository
        shell: pwsh
        id: repoSetup
        env:
          GH_TOKEN: ${{ github.token }}
        if: success()  
        run: |
          $VerbosePreference = 'Continue'
          $repoUrl = ""https://nuget.pkg.github.com/$($env:GITHUB_REPOSITORY_OWNER)/index.json""
          write-verbose "Got repoUrl: $repoUrl"
          $credential = New-Object System.Management.Automation.PSCredential("githubActions", (ConvertTo-SecureString $env:GH_TOKEN -AsPlainText -Force))
          $repositorySplat = @{
            uri = $repoUrl
            credential = $credential
            trusted = $true
            name = 'myGHPackages'
          }
          register-psresourcerepository @repositorySplat
          write-verbose "Repositories:`n $(get-psresourceRepository|select name,uri,trusted|format-list|out-string)"
      
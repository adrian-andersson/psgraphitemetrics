name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version increment'
        required: true
        default: 'none'
        type: choice
        options:
          - major
          - minor
          - patch
          - none
      release_type:
        description: 'Type of release'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - stable
          - prerelease

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0 #Ensure we are getting all the tag history

      - name: Install dependencies #Install the modules we need for the build
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Install-Module -Name Microsoft.PowerShell.PSResourceGet -Force -SkipPublisherCheck 
          Install-Module -Name ModuleForge -AllowPrerelease -Force -SkipPublisherCheck
          $moduleList = @('Pester','Microsoft.PowerShell.PSResourceGet','ModuleForge')
          import-module $moduleList
          get-module $moduleList|Select-object Name,@{name='version';expression={if($_.PrivateData.PSData.Prerelease){"$($_.Version)-$($_.PrivateData.PSData.Prerelease)"}else{"$($_.Version)"}}}|Format-Table

      - name: Run Pester tests #Unit and Integration Testing
        shell: pwsh
        id: pester_tests
        run: |
          $pesterConfigHash = @{
              Run = @{
                  Passthru = $true
                  Path = $(join-path -path (join-path -path . -childpath 'source') -childpath 'functions')
              }
              CodeCoverage = @{
                  Enabled = $true
                  Path = $(join-path -path (join-path -path . -childpath 'source') -childpath 'functions')
              }
              Output = @{
                  Verbosity = 'Detailed'
              }
          }
          $pesterConfig = New-PesterConfiguration -hashtable $pesterConfigHash
          Invoke-Pester -Configuration $pesterConfig

      - name: Get next version and build #Execute the moduleForge command to create new module files
        shell: pwsh
        id: generate_tag
        if: success()
        run: |
          $VerbosePreference = 'Continue'
          $versionTags = git tag --list
          write-verbose "Got VersionTags: $versionTags"
          if($versionTags) {
            $versions = $versionTags.ForEach{[semver]::new($_.TrimStart("v"))}
            $latest = ($versions | Sort-Object -Descending | Select-Object -First 1)
            Write-Verbose "Latest Tag Version: $($latest.tostring())"
          } else {
            Write-Verbose 'Generating new version from scratch at 1'
            $latest = [semver]::new(1,0,0)
          }
          $versionType="${{ github.event.inputs.version_type }}"
          write-verbose "Version Increment Type: $versionType"
          $releaseType="${{ github.event.inputs.release_type }}"
          write-verbose "Version Release Type: $releaseType"
          $nextVerSplat = @{
            version = $latest #The current version
          }
          if($versionType -eq 'none'){
            write-verbose 'Bumping current version'
          }else{
            write-verbose "Changing $versionType version"
            $nextVerSplat.increment = $versionType
          }
          if($releaseType -eq 'prerelease'){
            write-verbose 'Adding PreRelease Tag'
            $nextVerSplat.prerelease = $true
          }else{
            write-verbose 'Stable Release'
            $nextVerSplat.stablerelease = $true
          }
          $nextVersion = get-mfNextSemver @nextVerSplat
          Write-Verbose "NEXT VERSION SHOULD BE: $nextVersion"
          build-mfProject -version $nextVersion -InformationAction Continue
          write-verbose "Push $nextVersion to workflow as EnvVar"
          write-output "next_version=$nextVersion" >> $env:GITHUB_OUTPUT

      - name: Publish to Local #Push the build from last step to a temporary file-based repository on the build machine. Add Repository to XML for GHPackages Compatibility
        shell: pwsh
        id: publish_local
        if: success()
        env:
          REPO_URI: ${{ github.repository }}
        run: |
          $VerbosePreference = 'continue'
          $repositoryUri = "https://github.com/$($env:REPO_URI)"
          write-verbose "Repository URI: $repositoryUri"
          $currentPath = get-location
          #Find the item from the build
          $psd1Ref = $(get-childItem -path ./build/ -recurse -filter '*.psd1').fullname
          if($psd1Ref)
          {
            write-verbose "Found PSD1 file: $psd1Ref"
          }else{
            throw 'No PSD1 file found'
          }

          $repositoryPath = join-path -path $currentPath -childPath 'LocalRepository'
          write-verbose "Will create local repository at path: $repositoryPath"
          if(!(test-path $repositoryPath))
          {
            new-item -itemType Directory -path $repositoryPath
          }
          register-mfLocalPsResourceRepository -path $repositoryPath
          publish-psresource -repository LocalTestRepository -path $psd1Ref

          $nuRef = (get-childItem -path $repositoryPath -recurse -filter *.nupkg).fullname
          if($nuRef)
          {
            write-verbose "Found NUPKG: $nuRef"
          }else{
            throw 'No NUPKG found'
          }
          add-mfRepositoryXmlData -repositoryUri $repositoryUri  -nugetPackagePath $nuRef

      - name: Create new tag #Create version tag
        shell: pwsh
        if: success()
        env:
          NEXT_VERSION: ${{ steps.generate_tag.outputs.next_version }}
        run: |
          $VerbosePreference = 'Continue'
          write-verbose 'Post VerbosePreference'
          Write-Verbose "Creating tag v$($env:NEXT_VERSION)"
          $ver = "v$($env:NEXT_VERSION)"
          
          if($ver -and $ver -ne 'v' -and $ver.length -ge 6)
          {
            write-verbose "Tagging Version as: $ver"
            git tag "$ver"
            git push --tags 
          }else{
            throw 'No Version Tag found'
          }

      - name: Create GitHub Release #Push the nupkg and tag as a release
        shell: pwsh
        if: success()
        env:
          GH_TOKEN: ${{ github.token }}
          NEXT_VERSION: ${{ steps.generate_tag.outputs.next_version }}
        run: |
          $VerbosePreference = 'Continue'
          $ver = "v$($env:NEXT_VERSION)"
          $releaseName = "Release $($ver)"
          $releaseBody = "This is the release for version $ver"
          $currentPath = get-location
          $repositoryPath = join-path -path $currentPath -childPath 'LocalRepository'
          $nuRef = (get-childItem -path $repositoryPath -recurse -filter *.nupkg).fullname
          if($nuRef)
          {
            write-verbose "Found NUPKG: $nuRef"
          }else{
            throw 'No NUPKG found'
          }

          gh release create $ver --title $releaseName --notes $releaseBody
          gh release upload $ver $nuRef

      - name: Publish to GitHub Packages #Publish module to GH Packages
        shell: pwsh
        if: success()
        env:
          NEXT_VERSION: ${{ steps.generate_tag.outputs.next_version }}
          REPO_URI: ${{ github.repository_owner }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          $VerbosePreference = 'Continue'
          $ver = "v$($env:NEXT_VERSION)"
          $repoUri = "https://nuget.pkg.github.com/$($env:REPO_URI)/index.json"
          $currentPath = get-location
          $repositoryPath = join-path -path $currentPath -childPath 'LocalRepository'
          $nuRef = (get-childItem -path $repositoryPath -recurse -filter *.nupkg).fullname
          if($nuRef)
          {
            write-verbose "Found NUPKG: $nuRef"
          }else{
            throw 'No NUPKG found'
          }
          dotnet nuget push $nuRef -k $env:GH_PAT -s $repoUri